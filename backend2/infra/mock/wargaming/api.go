// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source=api.go -destination ../mock/wargaming/api.go -package wargaming
//

// Package wargaming is a generated GoMock package.
package wargaming

import (
	reflect "reflect"
	wargaming "wfs/backend2/infra/wargaming"

	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
	isgomock struct{}
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AccountInfo mocks base method.
func (m *MockAPI) AccountInfo(accountIDs []int) (wargaming.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfo", accountIDs)
	ret0, _ := ret[0].(wargaming.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo.
func (mr *MockAPIMockRecorder) AccountInfo(accountIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockAPI)(nil).AccountInfo), accountIDs)
}

// AccountList mocks base method.
func (m *MockAPI) AccountList(accountNames []string) (wargaming.AccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountList", accountNames)
	ret0, _ := ret[0].(wargaming.AccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountList indicates an expected call of AccountList.
func (mr *MockAPIMockRecorder) AccountList(accountNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountList", reflect.TypeOf((*MockAPI)(nil).AccountList), accountNames)
}

// AccountListForSearch mocks base method.
func (m *MockAPI) AccountListForSearch(prefix string) (wargaming.AccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountListForSearch", prefix)
	ret0, _ := ret[0].(wargaming.AccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountListForSearch indicates an expected call of AccountListForSearch.
func (mr *MockAPIMockRecorder) AccountListForSearch(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountListForSearch", reflect.TypeOf((*MockAPI)(nil).AccountListForSearch), prefix)
}

// BattleArenas mocks base method.
func (m *MockAPI) BattleArenas() (wargaming.BattleArenas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BattleArenas")
	ret0, _ := ret[0].(wargaming.BattleArenas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BattleArenas indicates an expected call of BattleArenas.
func (mr *MockAPIMockRecorder) BattleArenas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BattleArenas", reflect.TypeOf((*MockAPI)(nil).BattleArenas))
}

// BattleTypes mocks base method.
func (m *MockAPI) BattleTypes() (wargaming.BattleTypes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BattleTypes")
	ret0, _ := ret[0].(wargaming.BattleTypes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BattleTypes indicates an expected call of BattleTypes.
func (mr *MockAPIMockRecorder) BattleTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BattleTypes", reflect.TypeOf((*MockAPI)(nil).BattleTypes))
}

// ClansAccountInfo mocks base method.
func (m *MockAPI) ClansAccountInfo(accountIDs []int) (wargaming.ClansAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClansAccountInfo", accountIDs)
	ret0, _ := ret[0].(wargaming.ClansAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClansAccountInfo indicates an expected call of ClansAccountInfo.
func (mr *MockAPIMockRecorder) ClansAccountInfo(accountIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClansAccountInfo", reflect.TypeOf((*MockAPI)(nil).ClansAccountInfo), accountIDs)
}

// ClansInfo mocks base method.
func (m *MockAPI) ClansInfo(clanIDs []int) (wargaming.ClansInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClansInfo", clanIDs)
	ret0, _ := ret[0].(wargaming.ClansInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClansInfo indicates an expected call of ClansInfo.
func (mr *MockAPIMockRecorder) ClansInfo(clanIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClansInfo", reflect.TypeOf((*MockAPI)(nil).ClansInfo), clanIDs)
}

// EncycShips mocks base method.
func (m *MockAPI) EncycShips(pageNo int) (wargaming.EncycShips, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncycShips", pageNo)
	ret0, _ := ret[0].(wargaming.EncycShips)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncycShips indicates an expected call of EncycShips.
func (mr *MockAPIMockRecorder) EncycShips(pageNo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncycShips", reflect.TypeOf((*MockAPI)(nil).EncycShips), pageNo)
}

// GameVersion mocks base method.
func (m *MockAPI) GameVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GameVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GameVersion indicates an expected call of GameVersion.
func (mr *MockAPIMockRecorder) GameVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GameVersion", reflect.TypeOf((*MockAPI)(nil).GameVersion))
}

// ShipsStats mocks base method.
func (m *MockAPI) ShipsStats(accountID int) (wargaming.ShipsStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShipsStats", accountID)
	ret0, _ := ret[0].(wargaming.ShipsStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShipsStats indicates an expected call of ShipsStats.
func (mr *MockAPIMockRecorder) ShipsStats(accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShipsStats", reflect.TypeOf((*MockAPI)(nil).ShipsStats), accountID)
}
