// Code generated by MockGen. DO NOT EDIT.
// Source: logger_interface.go
//
// Generated by this command:
//
//	mockgen -source=logger_interface.go -destination ../mock_repository/logger_interface.go -package mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoggerInterface is a mock of LoggerInterface interface.
type MockLoggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerInterfaceMockRecorder
}

// MockLoggerInterfaceMockRecorder is the mock recorder for MockLoggerInterface.
type MockLoggerInterfaceMockRecorder struct {
	mock *MockLoggerInterface
}

// NewMockLoggerInterface creates a new mock instance.
func NewMockLoggerInterface(ctrl *gomock.Controller) *MockLoggerInterface {
	mock := &MockLoggerInterface{ctrl: ctrl}
	mock.recorder = &MockLoggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerInterface) EXPECT() *MockLoggerInterfaceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerInterface) Debug(message string, contexts map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", message, contexts)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerInterfaceMockRecorder) Debug(message, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerInterface)(nil).Debug), message, contexts)
}

// Error mocks base method.
func (m *MockLoggerInterface) Error(err error, contexts map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", err, contexts)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerInterfaceMockRecorder) Error(err, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerInterface)(nil).Error), err, contexts)
}

// Fatal mocks base method.
func (m *MockLoggerInterface) Fatal(err error, contexts map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", err, contexts)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerInterfaceMockRecorder) Fatal(err, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLoggerInterface)(nil).Fatal), err, contexts)
}

// Info mocks base method.
func (m *MockLoggerInterface) Info(message string, contexts map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", message, contexts)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerInterfaceMockRecorder) Info(message, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerInterface)(nil).Info), message, contexts)
}

// Init mocks base method.
func (m *MockLoggerInterface) Init(appCtx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", appCtx)
}

// Init indicates an expected call of Init.
func (mr *MockLoggerInterfaceMockRecorder) Init(appCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockLoggerInterface)(nil).Init), appCtx)
}

// SetOwnIGN mocks base method.
func (m *MockLoggerInterface) SetOwnIGN(ownIGN string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOwnIGN", ownIGN)
}

// SetOwnIGN indicates an expected call of SetOwnIGN.
func (mr *MockLoggerInterfaceMockRecorder) SetOwnIGN(ownIGN any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnIGN", reflect.TypeOf((*MockLoggerInterface)(nil).SetOwnIGN), ownIGN)
}

// Warn mocks base method.
func (m *MockLoggerInterface) Warn(err error, contexts map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", err, contexts)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerInterfaceMockRecorder) Warn(err, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerInterface)(nil).Warn), err, contexts)
}
