// Code generated by MockGen. DO NOT EDIT.
// Source: unofficial_wargaming_interface.go
//
// Generated by this command:
//
//	mockgen -source=unofficial_wargaming_interface.go -destination ../mock_repository/unofficial_wargaming_interface.go -package mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	model "wfs/backend/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockUnofficialWargamingInterface is a mock of UnofficialWargamingInterface interface.
type MockUnofficialWargamingInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUnofficialWargamingInterfaceMockRecorder
}

// MockUnofficialWargamingInterfaceMockRecorder is the mock recorder for MockUnofficialWargamingInterface.
type MockUnofficialWargamingInterfaceMockRecorder struct {
	mock *MockUnofficialWargamingInterface
}

// NewMockUnofficialWargamingInterface creates a new mock instance.
func NewMockUnofficialWargamingInterface(ctrl *gomock.Controller) *MockUnofficialWargamingInterface {
	mock := &MockUnofficialWargamingInterface{ctrl: ctrl}
	mock.recorder = &MockUnofficialWargamingInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnofficialWargamingInterface) EXPECT() *MockUnofficialWargamingInterfaceMockRecorder {
	return m.recorder
}

// ClansAutoComplete mocks base method.
func (m *MockUnofficialWargamingInterface) ClansAutoComplete(search string) (model.UWGClansAutocomplete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClansAutoComplete", search)
	ret0, _ := ret[0].(model.UWGClansAutocomplete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClansAutoComplete indicates an expected call of ClansAutoComplete.
func (mr *MockUnofficialWargamingInterfaceMockRecorder) ClansAutoComplete(search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClansAutoComplete", reflect.TypeOf((*MockUnofficialWargamingInterface)(nil).ClansAutoComplete), search)
}
