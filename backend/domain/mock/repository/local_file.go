// Code generated by MockGen. DO NOT EDIT.
// Source: local_file.go
//
// Generated by this command:
//
//	mockgen -source=local_file.go -destination ../mock/repository/local_file.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	model "wfs/backend/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockLocalFile is a mock of LocalFile interface.
type MockLocalFile struct {
	ctrl     *gomock.Controller
	recorder *MockLocalFileMockRecorder
	isgomock struct{}
}

// MockLocalFileMockRecorder is the mock recorder for MockLocalFile.
type MockLocalFileMockRecorder struct {
	mock *MockLocalFile
}

// NewMockLocalFile creates a new mock instance.
func NewMockLocalFile(ctrl *gomock.Controller) *MockLocalFile {
	mock := &MockLocalFile{ctrl: ctrl}
	mock.recorder = &MockLocalFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalFile) EXPECT() *MockLocalFileMockRecorder {
	return m.recorder
}

// ReadTempArenaInfo mocks base method.
func (m *MockLocalFile) ReadTempArenaInfo(installPath string) (model.TempArenaInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTempArenaInfo", installPath)
	ret0, _ := ret[0].(model.TempArenaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTempArenaInfo indicates an expected call of ReadTempArenaInfo.
func (mr *MockLocalFileMockRecorder) ReadTempArenaInfo(installPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTempArenaInfo", reflect.TypeOf((*MockLocalFile)(nil).ReadTempArenaInfo), installPath)
}

// SaveScreenshot mocks base method.
func (m *MockLocalFile) SaveScreenshot(path, base64Data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveScreenshot", path, base64Data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveScreenshot indicates an expected call of SaveScreenshot.
func (mr *MockLocalFileMockRecorder) SaveScreenshot(path, base64Data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveScreenshot", reflect.TypeOf((*MockLocalFile)(nil).SaveScreenshot), path, base64Data)
}

// SaveTempArenaInfo mocks base method.
func (m *MockLocalFile) SaveTempArenaInfo(path string, tempArenaInfo model.TempArenaInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTempArenaInfo", path, tempArenaInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTempArenaInfo indicates an expected call of SaveTempArenaInfo.
func (mr *MockLocalFileMockRecorder) SaveTempArenaInfo(path, tempArenaInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTempArenaInfo", reflect.TypeOf((*MockLocalFile)(nil).SaveTempArenaInfo), path, tempArenaInfo)
}
