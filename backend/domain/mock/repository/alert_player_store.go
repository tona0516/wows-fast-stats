// Code generated by MockGen. DO NOT EDIT.
// Source: alert_player_store.go
//
// Generated by this command:
//
//	mockgen -source=alert_player_store.go -destination ../mock/repository/alert_player_store.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	model "wfs/backend/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockAlertPlayerStore is a mock of AlertPlayerStore interface.
type MockAlertPlayerStore struct {
	ctrl     *gomock.Controller
	recorder *MockAlertPlayerStoreMockRecorder
	isgomock struct{}
}

// MockAlertPlayerStoreMockRecorder is the mock recorder for MockAlertPlayerStore.
type MockAlertPlayerStoreMockRecorder struct {
	mock *MockAlertPlayerStore
}

// NewMockAlertPlayerStore creates a new mock instance.
func NewMockAlertPlayerStore(ctrl *gomock.Controller) *MockAlertPlayerStore {
	mock := &MockAlertPlayerStore{ctrl: ctrl}
	mock.recorder = &MockAlertPlayerStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertPlayerStore) EXPECT() *MockAlertPlayerStoreMockRecorder {
	return m.recorder
}

// DeleteV0 mocks base method.
func (m *MockAlertPlayerStore) DeleteV0() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteV0")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteV0 indicates an expected call of DeleteV0.
func (mr *MockAlertPlayerStoreMockRecorder) DeleteV0() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV0", reflect.TypeOf((*MockAlertPlayerStore)(nil).DeleteV0))
}

// GetV0 mocks base method.
func (m *MockAlertPlayerStore) GetV0() ([]model.AlertPlayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV0")
	ret0, _ := ret[0].([]model.AlertPlayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV0 indicates an expected call of GetV0.
func (mr *MockAlertPlayerStoreMockRecorder) GetV0() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV0", reflect.TypeOf((*MockAlertPlayerStore)(nil).GetV0))
}

// GetV1 mocks base method.
func (m *MockAlertPlayerStore) GetV1() ([]model.AlertPlayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1")
	ret0, _ := ret[0].([]model.AlertPlayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1 indicates an expected call of GetV1.
func (mr *MockAlertPlayerStoreMockRecorder) GetV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1", reflect.TypeOf((*MockAlertPlayerStore)(nil).GetV1))
}

// IsExistV0 mocks base method.
func (m *MockAlertPlayerStore) IsExistV0() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistV0")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistV0 indicates an expected call of IsExistV0.
func (mr *MockAlertPlayerStoreMockRecorder) IsExistV0() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistV0", reflect.TypeOf((*MockAlertPlayerStore)(nil).IsExistV0))
}

// IsExistV1 mocks base method.
func (m *MockAlertPlayerStore) IsExistV1() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistV1")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistV1 indicates an expected call of IsExistV1.
func (mr *MockAlertPlayerStoreMockRecorder) IsExistV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistV1", reflect.TypeOf((*MockAlertPlayerStore)(nil).IsExistV1))
}

// SaveV1 mocks base method.
func (m *MockAlertPlayerStore) SaveV1(players []model.AlertPlayer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveV1", players)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveV1 indicates an expected call of SaveV1.
func (mr *MockAlertPlayerStoreMockRecorder) SaveV1(players any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveV1", reflect.TypeOf((*MockAlertPlayerStore)(nil).SaveV1), players)
}
