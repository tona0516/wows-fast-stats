// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination ../mock/repository/storage.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DataVersion mocks base method.
func (m *MockStorage) DataVersion() (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataVersion")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataVersion indicates an expected call of DataVersion.
func (mr *MockStorageMockRecorder) DataVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataVersion", reflect.TypeOf((*MockStorage)(nil).DataVersion))
}

// WriteDataVersion mocks base method.
func (m *MockStorage) WriteDataVersion(version uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteDataVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteDataVersion indicates an expected call of WriteDataVersion.
func (mr *MockStorageMockRecorder) WriteDataVersion(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteDataVersion", reflect.TypeOf((*MockStorage)(nil).WriteDataVersion), version)
}
