// Code generated by MockGen. DO NOT EDIT.
// Source: account_fetcher.go
//
// Generated by this command:
//
//	mockgen -source=account_fetcher.go -destination ../mock/repository/account_fetcher.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	model "wfs/backend/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountFetcher is a mock of AccountFetcher interface.
type MockAccountFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockAccountFetcherMockRecorder
	isgomock struct{}
}

// MockAccountFetcherMockRecorder is the mock recorder for MockAccountFetcher.
type MockAccountFetcherMockRecorder struct {
	mock *MockAccountFetcher
}

// NewMockAccountFetcher creates a new mock instance.
func NewMockAccountFetcher(ctrl *gomock.Controller) *MockAccountFetcher {
	mock := &MockAccountFetcher{ctrl: ctrl}
	mock.recorder = &MockAccountFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountFetcher) EXPECT() *MockAccountFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockAccountFetcher) Fetch(playerNames []string) (model.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", playerNames)
	ret0, _ := ret[0].(model.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockAccountFetcherMockRecorder) Fetch(playerNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockAccountFetcher)(nil).Fetch), playerNames)
}

// Search mocks base method.
func (m *MockAccountFetcher) Search(prefix string) (model.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", prefix)
	ret0, _ := ret[0].(model.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockAccountFetcherMockRecorder) Search(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockAccountFetcher)(nil).Search), prefix)
}
