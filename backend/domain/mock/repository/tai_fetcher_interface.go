// Code generated by MockGen. DO NOT EDIT.
// Source: tai_fetcher_interface.go
//
// Generated by this command:
//
//	mockgen -source=tai_fetcher_interface.go -destination ../mock/repository/tai_fetcher_interface.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	model "wfs/backend/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockTAIFetcherInterface is a mock of TAIFetcherInterface interface.
type MockTAIFetcherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTAIFetcherInterfaceMockRecorder
	isgomock struct{}
}

// MockTAIFetcherInterfaceMockRecorder is the mock recorder for MockTAIFetcherInterface.
type MockTAIFetcherInterfaceMockRecorder struct {
	mock *MockTAIFetcherInterface
}

// NewMockTAIFetcherInterface creates a new mock instance.
func NewMockTAIFetcherInterface(ctrl *gomock.Controller) *MockTAIFetcherInterface {
	mock := &MockTAIFetcherInterface{ctrl: ctrl}
	mock.recorder = &MockTAIFetcherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTAIFetcherInterface) EXPECT() *MockTAIFetcherInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTAIFetcherInterface) Get(installPath string) (model.TempArenaInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", installPath)
	ret0, _ := ret[0].(model.TempArenaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTAIFetcherInterfaceMockRecorder) Get(installPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTAIFetcherInterface)(nil).Get), installPath)
}
