// Code generated by MockGen. DO NOT EDIT.
// Source: user_config_store.go
//
// Generated by this command:
//
//	mockgen -source=user_config_store.go -destination ../mock/repository/user_config_store.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	model "wfs/backend/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockUserConfigStore is a mock of UserConfigStore interface.
type MockUserConfigStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserConfigStoreMockRecorder
	isgomock struct{}
}

// MockUserConfigStoreMockRecorder is the mock recorder for MockUserConfigStore.
type MockUserConfigStoreMockRecorder struct {
	mock *MockUserConfigStore
}

// NewMockUserConfigStore creates a new mock instance.
func NewMockUserConfigStore(ctrl *gomock.Controller) *MockUserConfigStore {
	mock := &MockUserConfigStore{ctrl: ctrl}
	mock.recorder = &MockUserConfigStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserConfigStore) EXPECT() *MockUserConfigStoreMockRecorder {
	return m.recorder
}

// DeleteV0 mocks base method.
func (m *MockUserConfigStore) DeleteV0() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteV0")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteV0 indicates an expected call of DeleteV0.
func (mr *MockUserConfigStoreMockRecorder) DeleteV0() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV0", reflect.TypeOf((*MockUserConfigStore)(nil).DeleteV0))
}

// GetV0 mocks base method.
func (m *MockUserConfigStore) GetV0() (model.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV0")
	ret0, _ := ret[0].(model.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV0 indicates an expected call of GetV0.
func (mr *MockUserConfigStoreMockRecorder) GetV0() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV0", reflect.TypeOf((*MockUserConfigStore)(nil).GetV0))
}

// GetV1 mocks base method.
func (m *MockUserConfigStore) GetV1() (model.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV1")
	ret0, _ := ret[0].(model.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV1 indicates an expected call of GetV1.
func (mr *MockUserConfigStoreMockRecorder) GetV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV1", reflect.TypeOf((*MockUserConfigStore)(nil).GetV1))
}

// GetV2 mocks base method.
func (m *MockUserConfigStore) GetV2() (model.UserConfigV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV2")
	ret0, _ := ret[0].(model.UserConfigV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetV2 indicates an expected call of GetV2.
func (mr *MockUserConfigStoreMockRecorder) GetV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV2", reflect.TypeOf((*MockUserConfigStore)(nil).GetV2))
}

// IsExistV0 mocks base method.
func (m *MockUserConfigStore) IsExistV0() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistV0")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistV0 indicates an expected call of IsExistV0.
func (mr *MockUserConfigStoreMockRecorder) IsExistV0() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistV0", reflect.TypeOf((*MockUserConfigStore)(nil).IsExistV0))
}

// IsExistV1 mocks base method.
func (m *MockUserConfigStore) IsExistV1() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistV1")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistV1 indicates an expected call of IsExistV1.
func (mr *MockUserConfigStoreMockRecorder) IsExistV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistV1", reflect.TypeOf((*MockUserConfigStore)(nil).IsExistV1))
}

// SaveV1 mocks base method.
func (m *MockUserConfigStore) SaveV1(config model.UserConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveV1", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveV1 indicates an expected call of SaveV1.
func (mr *MockUserConfigStoreMockRecorder) SaveV1(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveV1", reflect.TypeOf((*MockUserConfigStore)(nil).SaveV1), config)
}

// SaveV2 mocks base method.
func (m *MockUserConfigStore) SaveV2(config model.UserConfigV2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveV2", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveV2 indicates an expected call of SaveV2.
func (mr *MockUserConfigStoreMockRecorder) SaveV2(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveV2", reflect.TypeOf((*MockUserConfigStore)(nil).SaveV2), config)
}
