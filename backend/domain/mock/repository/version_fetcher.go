// Code generated by MockGen. DO NOT EDIT.
// Source: version_fetcher.go
//
// Generated by this command:
//
//	mockgen -source=version_fetcher.go -destination ../mock/repository/version_fetcher.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	model "wfs/backend/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockVersionFetcher is a mock of VersionFetcher interface.
type MockVersionFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockVersionFetcherMockRecorder
	isgomock struct{}
}

// MockVersionFetcherMockRecorder is the mock recorder for MockVersionFetcher.
type MockVersionFetcherMockRecorder struct {
	mock *MockVersionFetcher
}

// NewMockVersionFetcher creates a new mock instance.
func NewMockVersionFetcher(ctrl *gomock.Controller) *MockVersionFetcher {
	mock := &MockVersionFetcher{ctrl: ctrl}
	mock.recorder = &MockVersionFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionFetcher) EXPECT() *MockVersionFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockVersionFetcher) Fetch() (model.LatestRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch")
	ret0, _ := ret[0].(model.LatestRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockVersionFetcherMockRecorder) Fetch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockVersionFetcher)(nil).Fetch))
}
