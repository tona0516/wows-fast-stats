// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go
//
// Generated by this command:
//
//	mockgen -source=logger.go -destination ../mock/repository/logger.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(message string, contexts map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", message, contexts)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(message, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), message, contexts)
}

// Error mocks base method.
func (m *MockLogger) Error(err error, contexts map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", err, contexts)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(err, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), err, contexts)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(err error, contexts map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", err, contexts)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(err, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), err, contexts)
}

// Info mocks base method.
func (m *MockLogger) Info(message string, contexts map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", message, contexts)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(message, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), message, contexts)
}

// Init mocks base method.
func (m *MockLogger) Init(appCtx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", appCtx)
}

// Init indicates an expected call of Init.
func (mr *MockLoggerMockRecorder) Init(appCtx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockLogger)(nil).Init), appCtx)
}

// SetOwnIGN mocks base method.
func (m *MockLogger) SetOwnIGN(ign string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOwnIGN", ign)
}

// SetOwnIGN indicates an expected call of SetOwnIGN.
func (mr *MockLoggerMockRecorder) SetOwnIGN(ign any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnIGN", reflect.TypeOf((*MockLogger)(nil).SetOwnIGN), ign)
}

// Warn mocks base method.
func (m *MockLogger) Warn(err error, contexts map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", err, contexts)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(err, contexts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), err, contexts)
}
