// Code generated by MockGen. DO NOT EDIT.
// Source: raw_stat_fetcher.go
//
// Generated by this command:
//
//	mockgen -source=raw_stat_fetcher.go -destination ../mock/repository/raw_stat_fetcher.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	model "wfs/backend/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockRawStatFetcher is a mock of RawStatFetcher interface.
type MockRawStatFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockRawStatFetcherMockRecorder
	isgomock struct{}
}

// MockRawStatFetcherMockRecorder is the mock recorder for MockRawStatFetcher.
type MockRawStatFetcherMockRecorder struct {
	mock *MockRawStatFetcher
}

// NewMockRawStatFetcher creates a new mock instance.
func NewMockRawStatFetcher(ctrl *gomock.Controller) *MockRawStatFetcher {
	mock := &MockRawStatFetcher{ctrl: ctrl}
	mock.recorder = &MockRawStatFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRawStatFetcher) EXPECT() *MockRawStatFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockRawStatFetcher) Fetch(accountIDs []int) (model.RawStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", accountIDs)
	ret0, _ := ret[0].(model.RawStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockRawStatFetcherMockRecorder) Fetch(accountIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRawStatFetcher)(nil).Fetch), accountIDs)
}
