// Code generated by MockGen. DO NOT EDIT.
// Source: battle_,meta_fetcher_interface.go
//
// Generated by this command:
//
//	mockgen -source=battle_,meta_fetcher_interface.go -destination ../mock/repository/battle_,meta_fetcher_interface.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	model "wfs/backend/domain/model"

	gomock "go.uber.org/mock/gomock"
)

// MockBattleMetaFetcherInterface is a mock of BattleMetaFetcherInterface interface.
type MockBattleMetaFetcherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBattleMetaFetcherInterfaceMockRecorder
	isgomock struct{}
}

// MockBattleMetaFetcherInterfaceMockRecorder is the mock recorder for MockBattleMetaFetcherInterface.
type MockBattleMetaFetcherInterfaceMockRecorder struct {
	mock *MockBattleMetaFetcherInterface
}

// NewMockBattleMetaFetcherInterface creates a new mock instance.
func NewMockBattleMetaFetcherInterface(ctrl *gomock.Controller) *MockBattleMetaFetcherInterface {
	mock := &MockBattleMetaFetcherInterface{ctrl: ctrl}
	mock.recorder = &MockBattleMetaFetcherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBattleMetaFetcherInterface) EXPECT() *MockBattleMetaFetcherInterfaceMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockBattleMetaFetcherInterface) Fetch() (model.BattleMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch")
	ret0, _ := ret[0].(model.BattleMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockBattleMetaFetcherInterfaceMockRecorder) Fetch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBattleMetaFetcherInterface)(nil).Fetch))
}
