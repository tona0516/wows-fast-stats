// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	domain "wfs/backend/domain"

	mock "github.com/stretchr/testify/mock"
)

// LocalFileInterface is an autogenerated mock type for the LocalFileInterface type
type LocalFileInterface struct {
	mock.Mock
}

// AlertPlayers provides a mock function with given fields:
func (_m *LocalFileInterface) AlertPlayers() ([]domain.AlertPlayer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AlertPlayers")
	}

	var r0 []domain.AlertPlayer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.AlertPlayer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.AlertPlayer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AlertPlayer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAlertPlayers provides a mock function with given fields:
func (_m *LocalFileInterface) DeleteAlertPlayers() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertPlayers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields:
func (_m *LocalFileInterface) DeleteUser() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsExistAlertPlayers provides a mock function with given fields:
func (_m *LocalFileInterface) IsExistAlertPlayers() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsExistAlertPlayers")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsExistUser provides a mock function with given fields:
func (_m *LocalFileInterface) IsExistUser() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsExistUser")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SaveScreenshot provides a mock function with given fields: path, base64Data
func (_m *LocalFileInterface) SaveScreenshot(path string, base64Data string) error {
	ret := _m.Called(path, base64Data)

	if len(ret) == 0 {
		panic("no return value specified for SaveScreenshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(path, base64Data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTempArenaInfo provides a mock function with given fields: tempArenaInfo
func (_m *LocalFileInterface) SaveTempArenaInfo(tempArenaInfo domain.TempArenaInfo) error {
	ret := _m.Called(tempArenaInfo)

	if len(ret) == 0 {
		panic("no return value specified for SaveTempArenaInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.TempArenaInfo) error); ok {
		r0 = rf(tempArenaInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TempArenaInfo provides a mock function with given fields: installPath
func (_m *LocalFileInterface) TempArenaInfo(installPath string) (domain.TempArenaInfo, error) {
	ret := _m.Called(installPath)

	if len(ret) == 0 {
		panic("no return value specified for TempArenaInfo")
	}

	var r0 domain.TempArenaInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.TempArenaInfo, error)); ok {
		return rf(installPath)
	}
	if rf, ok := ret.Get(0).(func(string) domain.TempArenaInfo); ok {
		r0 = rf(installPath)
	} else {
		r0 = ret.Get(0).(domain.TempArenaInfo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(installPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields:
func (_m *LocalFileInterface) User() (domain.UserConfig, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 domain.UserConfig
	var r1 error
	if rf, ok := ret.Get(0).(func() (domain.UserConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() domain.UserConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.UserConfig)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLocalFileInterface creates a new instance of LocalFileInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocalFileInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocalFileInterface {
	mock := &LocalFileInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
