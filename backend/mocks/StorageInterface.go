// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	model "wfs/backend/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// StorageInterface is an autogenerated mock type for the StorageInterface type
type StorageInterface struct {
	mock.Mock
}

// AlertPlayers provides a mock function with given fields:
func (_m *StorageInterface) AlertPlayers() ([]model.AlertPlayer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AlertPlayers")
	}

	var r0 []model.AlertPlayer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.AlertPlayer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.AlertPlayer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AlertPlayer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataVersion provides a mock function with given fields:
func (_m *StorageInterface) DataVersion() (uint, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DataVersion")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectedStats provides a mock function with given fields:
func (_m *StorageInterface) ExpectedStats() (model.ExpectedStats, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ExpectedStats")
	}

	var r0 model.ExpectedStats
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.ExpectedStats, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.ExpectedStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ExpectedStats)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExistAlertPlayers provides a mock function with given fields:
func (_m *StorageInterface) IsExistAlertPlayers() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsExistAlertPlayers")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsExistUserConfig provides a mock function with given fields:
func (_m *StorageInterface) IsExistUserConfig() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsExistUserConfig")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OwnIGN provides a mock function with given fields:
func (_m *StorageInterface) OwnIGN() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OwnIGN")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserConfig provides a mock function with given fields:
func (_m *StorageInterface) UserConfig() (model.UserConfig, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserConfig")
	}

	var r0 model.UserConfig
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.UserConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.UserConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.UserConfig)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteAlertPlayers provides a mock function with given fields: players
func (_m *StorageInterface) WriteAlertPlayers(players []model.AlertPlayer) error {
	ret := _m.Called(players)

	if len(ret) == 0 {
		panic("no return value specified for WriteAlertPlayers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]model.AlertPlayer) error); ok {
		r0 = rf(players)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteDataVersion provides a mock function with given fields: version
func (_m *StorageInterface) WriteDataVersion(version uint) error {
	ret := _m.Called(version)

	if len(ret) == 0 {
		panic("no return value specified for WriteDataVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteExpectedStats provides a mock function with given fields: expectedStats
func (_m *StorageInterface) WriteExpectedStats(expectedStats model.ExpectedStats) error {
	ret := _m.Called(expectedStats)

	if len(ret) == 0 {
		panic("no return value specified for WriteExpectedStats")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ExpectedStats) error); ok {
		r0 = rf(expectedStats)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteOwnIGN provides a mock function with given fields: ign
func (_m *StorageInterface) WriteOwnIGN(ign string) error {
	ret := _m.Called(ign)

	if len(ret) == 0 {
		panic("no return value specified for WriteOwnIGN")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteUserConfig provides a mock function with given fields: config
func (_m *StorageInterface) WriteUserConfig(config model.UserConfig) error {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for WriteUserConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserConfig) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorageInterface creates a new instance of StorageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageInterface {
	mock := &StorageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
