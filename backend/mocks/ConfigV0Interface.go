// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	model "wfs/backend/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// ConfigV0Interface is an autogenerated mock type for the ConfigV0Interface type
type ConfigV0Interface struct {
	mock.Mock
}

// AlertPlayers provides a mock function with given fields:
func (_m *ConfigV0Interface) AlertPlayers() ([]model.AlertPlayer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AlertPlayers")
	}

	var r0 []model.AlertPlayer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.AlertPlayer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.AlertPlayer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AlertPlayer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAlertPlayers provides a mock function with given fields:
func (_m *ConfigV0Interface) DeleteAlertPlayers() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlertPlayers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields:
func (_m *ConfigV0Interface) DeleteUser() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsExistAlertPlayers provides a mock function with given fields:
func (_m *ConfigV0Interface) IsExistAlertPlayers() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsExistAlertPlayers")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsExistUser provides a mock function with given fields:
func (_m *ConfigV0Interface) IsExistUser() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsExistUser")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UserV1 provides a mock function with given fields:
func (_m *ConfigV0Interface) UserV1() (model.UserConfigV1, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserV1")
	}

	var r0 model.UserConfigV1
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.UserConfigV1, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.UserConfigV1); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.UserConfigV1)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConfigV0Interface creates a new instance of ConfigV0Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigV0Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigV0Interface {
	mock := &ConfigV0Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
