// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	vo "wfs/backend/application/vo"

	mock "github.com/stretchr/testify/mock"
)

// LoggerInterface is an autogenerated mock type for the LoggerInterface type
type LoggerInterface struct {
	mock.Mock
}

// Debug provides a mock function with given fields: message, contexts
func (_m *LoggerInterface) Debug(message string, contexts ...vo.Pair) {
	_va := make([]interface{}, len(contexts))
	for _i := range contexts {
		_va[_i] = contexts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: err, contexts
func (_m *LoggerInterface) Error(err error, contexts ...vo.Pair) {
	_va := make([]interface{}, len(contexts))
	for _i := range contexts {
		_va[_i] = contexts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: message, contexts
func (_m *LoggerInterface) Info(message string, contexts ...vo.Pair) {
	_va := make([]interface{}, len(contexts))
	for _i := range contexts {
		_va[_i] = contexts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Init provides a mock function with given fields: appCtx
func (_m *LoggerInterface) Init(appCtx context.Context) {
	_m.Called(appCtx)
}

// Warn provides a mock function with given fields: err, contexts
func (_m *LoggerInterface) Warn(err error, contexts ...vo.Pair) {
	_va := make([]interface{}, len(contexts))
	for _i := range contexts {
		_va[_i] = contexts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// NewLoggerInterface creates a new instance of LoggerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoggerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoggerInterface {
	mock := &LoggerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
