// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	model "wfs/backend/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// WargamingInterface is an autogenerated mock type for the WargamingInterface type
type WargamingInterface struct {
	mock.Mock
}

// AccountInfo provides a mock function with given fields: appID, accountIDs
func (_m *WargamingInterface) AccountInfo(appID string, accountIDs []int) (model.WGAccountInfo, error) {
	ret := _m.Called(appID, accountIDs)

	if len(ret) == 0 {
		panic("no return value specified for AccountInfo")
	}

	var r0 model.WGAccountInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []int) (model.WGAccountInfo, error)); ok {
		return rf(appID, accountIDs)
	}
	if rf, ok := ret.Get(0).(func(string, []int) model.WGAccountInfo); ok {
		r0 = rf(appID, accountIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WGAccountInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []int) error); ok {
		r1 = rf(appID, accountIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountList provides a mock function with given fields: appID, accountNames
func (_m *WargamingInterface) AccountList(appID string, accountNames []string) (model.WGAccountList, error) {
	ret := _m.Called(appID, accountNames)

	if len(ret) == 0 {
		panic("no return value specified for AccountList")
	}

	var r0 model.WGAccountList
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) (model.WGAccountList, error)); ok {
		return rf(appID, accountNames)
	}
	if rf, ok := ret.Get(0).(func(string, []string) model.WGAccountList); ok {
		r0 = rf(appID, accountNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WGAccountList)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(appID, accountNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountListForSearch provides a mock function with given fields: appID, prefix
func (_m *WargamingInterface) AccountListForSearch(appID string, prefix string) (model.WGAccountList, error) {
	ret := _m.Called(appID, prefix)

	if len(ret) == 0 {
		panic("no return value specified for AccountListForSearch")
	}

	var r0 model.WGAccountList
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (model.WGAccountList, error)); ok {
		return rf(appID, prefix)
	}
	if rf, ok := ret.Get(0).(func(string, string) model.WGAccountList); ok {
		r0 = rf(appID, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WGAccountList)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appID, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BattleArenas provides a mock function with given fields: appID
func (_m *WargamingInterface) BattleArenas(appID string) (model.WGBattleArenas, error) {
	ret := _m.Called(appID)

	if len(ret) == 0 {
		panic("no return value specified for BattleArenas")
	}

	var r0 model.WGBattleArenas
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.WGBattleArenas, error)); ok {
		return rf(appID)
	}
	if rf, ok := ret.Get(0).(func(string) model.WGBattleArenas); ok {
		r0 = rf(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WGBattleArenas)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BattleTypes provides a mock function with given fields: appID
func (_m *WargamingInterface) BattleTypes(appID string) (model.WGBattleTypes, error) {
	ret := _m.Called(appID)

	if len(ret) == 0 {
		panic("no return value specified for BattleTypes")
	}

	var r0 model.WGBattleTypes
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.WGBattleTypes, error)); ok {
		return rf(appID)
	}
	if rf, ok := ret.Get(0).(func(string) model.WGBattleTypes); ok {
		r0 = rf(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WGBattleTypes)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClansAccountInfo provides a mock function with given fields: appID, accountIDs
func (_m *WargamingInterface) ClansAccountInfo(appID string, accountIDs []int) (model.WGClansAccountInfo, error) {
	ret := _m.Called(appID, accountIDs)

	if len(ret) == 0 {
		panic("no return value specified for ClansAccountInfo")
	}

	var r0 model.WGClansAccountInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []int) (model.WGClansAccountInfo, error)); ok {
		return rf(appID, accountIDs)
	}
	if rf, ok := ret.Get(0).(func(string, []int) model.WGClansAccountInfo); ok {
		r0 = rf(appID, accountIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WGClansAccountInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []int) error); ok {
		r1 = rf(appID, accountIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClansInfo provides a mock function with given fields: appID, clanIDs
func (_m *WargamingInterface) ClansInfo(appID string, clanIDs []int) (model.WGClansInfo, error) {
	ret := _m.Called(appID, clanIDs)

	if len(ret) == 0 {
		panic("no return value specified for ClansInfo")
	}

	var r0 model.WGClansInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []int) (model.WGClansInfo, error)); ok {
		return rf(appID, clanIDs)
	}
	if rf, ok := ret.Get(0).(func(string, []int) model.WGClansInfo); ok {
		r0 = rf(appID, clanIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WGClansInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []int) error); ok {
		r1 = rf(appID, clanIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncycShips provides a mock function with given fields: appID, pageNo
func (_m *WargamingInterface) EncycShips(appID string, pageNo int) (model.WGEncycShips, int, error) {
	ret := _m.Called(appID, pageNo)

	if len(ret) == 0 {
		panic("no return value specified for EncycShips")
	}

	var r0 model.WGEncycShips
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int) (model.WGEncycShips, int, error)); ok {
		return rf(appID, pageNo)
	}
	if rf, ok := ret.Get(0).(func(string, int) model.WGEncycShips); ok {
		r0 = rf(appID, pageNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WGEncycShips)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(appID, pageNo)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(appID, pageNo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ShipsStats provides a mock function with given fields: appID, accountID
func (_m *WargamingInterface) ShipsStats(appID string, accountID int) (model.WGShipsStats, error) {
	ret := _m.Called(appID, accountID)

	if len(ret) == 0 {
		panic("no return value specified for ShipsStats")
	}

	var r0 model.WGShipsStats
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (model.WGShipsStats, error)); ok {
		return rf(appID, accountID)
	}
	if rf, ok := ret.Get(0).(func(string, int) model.WGShipsStats); ok {
		r0 = rf(appID, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WGShipsStats)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(appID, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Test provides a mock function with given fields: appID
func (_m *WargamingInterface) Test(appID string) (bool, error) {
	ret := _m.Called(appID)

	if len(ret) == 0 {
		panic("no return value specified for Test")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(appID)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(appID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWargamingInterface creates a new instance of WargamingInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWargamingInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *WargamingInterface {
	mock := &WargamingInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
