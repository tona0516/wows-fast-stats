// Code generated by MockGen. DO NOT EDIT.
// Source: wargaming.go
//
// Generated by this command:
//
//	mockgen -source=wargaming.go -destination ../mock/webapi/wargaming.go -package webapi
//

// Package webapi is a generated GoMock package.
package webapi

import (
	reflect "reflect"
	response "wfs/backend/infra/response"

	gomock "go.uber.org/mock/gomock"
)

// MockWargaming is a mock of Wargaming interface.
type MockWargaming struct {
	ctrl     *gomock.Controller
	recorder *MockWargamingMockRecorder
	isgomock struct{}
}

// MockWargamingMockRecorder is the mock recorder for MockWargaming.
type MockWargamingMockRecorder struct {
	mock *MockWargaming
}

// NewMockWargaming creates a new mock instance.
func NewMockWargaming(ctrl *gomock.Controller) *MockWargaming {
	mock := &MockWargaming{ctrl: ctrl}
	mock.recorder = &MockWargamingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWargaming) EXPECT() *MockWargamingMockRecorder {
	return m.recorder
}

// AccountInfo mocks base method.
func (m *MockWargaming) AccountInfo(accountIDs []int) (response.WGAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfo", accountIDs)
	ret0, _ := ret[0].(response.WGAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo.
func (mr *MockWargamingMockRecorder) AccountInfo(accountIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockWargaming)(nil).AccountInfo), accountIDs)
}

// AccountList mocks base method.
func (m *MockWargaming) AccountList(accountNames []string) (response.WGAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountList", accountNames)
	ret0, _ := ret[0].(response.WGAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountList indicates an expected call of AccountList.
func (mr *MockWargamingMockRecorder) AccountList(accountNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountList", reflect.TypeOf((*MockWargaming)(nil).AccountList), accountNames)
}

// AccountListForSearch mocks base method.
func (m *MockWargaming) AccountListForSearch(prefix string) (response.WGAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountListForSearch", prefix)
	ret0, _ := ret[0].(response.WGAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountListForSearch indicates an expected call of AccountListForSearch.
func (mr *MockWargamingMockRecorder) AccountListForSearch(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountListForSearch", reflect.TypeOf((*MockWargaming)(nil).AccountListForSearch), prefix)
}

// BattleArenas mocks base method.
func (m *MockWargaming) BattleArenas() (response.WGBattleArenas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BattleArenas")
	ret0, _ := ret[0].(response.WGBattleArenas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BattleArenas indicates an expected call of BattleArenas.
func (mr *MockWargamingMockRecorder) BattleArenas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BattleArenas", reflect.TypeOf((*MockWargaming)(nil).BattleArenas))
}

// BattleTypes mocks base method.
func (m *MockWargaming) BattleTypes() (response.WGBattleTypes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BattleTypes")
	ret0, _ := ret[0].(response.WGBattleTypes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BattleTypes indicates an expected call of BattleTypes.
func (mr *MockWargamingMockRecorder) BattleTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BattleTypes", reflect.TypeOf((*MockWargaming)(nil).BattleTypes))
}

// ClansAccountInfo mocks base method.
func (m *MockWargaming) ClansAccountInfo(accountIDs []int) (response.WGClansAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClansAccountInfo", accountIDs)
	ret0, _ := ret[0].(response.WGClansAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClansAccountInfo indicates an expected call of ClansAccountInfo.
func (mr *MockWargamingMockRecorder) ClansAccountInfo(accountIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClansAccountInfo", reflect.TypeOf((*MockWargaming)(nil).ClansAccountInfo), accountIDs)
}

// ClansInfo mocks base method.
func (m *MockWargaming) ClansInfo(clanIDs []int) (response.WGClansInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClansInfo", clanIDs)
	ret0, _ := ret[0].(response.WGClansInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClansInfo indicates an expected call of ClansInfo.
func (mr *MockWargamingMockRecorder) ClansInfo(clanIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClansInfo", reflect.TypeOf((*MockWargaming)(nil).ClansInfo), clanIDs)
}

// EncycShips mocks base method.
func (m *MockWargaming) EncycShips(pageNo int) (response.WGEncycShips, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncycShips", pageNo)
	ret0, _ := ret[0].(response.WGEncycShips)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EncycShips indicates an expected call of EncycShips.
func (mr *MockWargamingMockRecorder) EncycShips(pageNo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncycShips", reflect.TypeOf((*MockWargaming)(nil).EncycShips), pageNo)
}

// GameVersion mocks base method.
func (m *MockWargaming) GameVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GameVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GameVersion indicates an expected call of GameVersion.
func (mr *MockWargamingMockRecorder) GameVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GameVersion", reflect.TypeOf((*MockWargaming)(nil).GameVersion))
}

// ShipsStats mocks base method.
func (m *MockWargaming) ShipsStats(accountID int) (response.WGShipsStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShipsStats", accountID)
	ret0, _ := ret[0].(response.WGShipsStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShipsStats indicates an expected call of ShipsStats.
func (mr *MockWargamingMockRecorder) ShipsStats(accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShipsStats", reflect.TypeOf((*MockWargaming)(nil).ShipsStats), accountID)
}
