// Code generated by MockGen. DO NOT EDIT.
// Source: github.go
//
// Generated by this command:
//
//	mockgen -source=github.go -destination ../mock/webapi/github.go -package webapi
//

// Package webapi is a generated GoMock package.
package webapi

import (
	reflect "reflect"
	response "wfs/backend/infra/response"

	gomock "go.uber.org/mock/gomock"
)

// MockGithub is a mock of Github interface.
type MockGithub struct {
	ctrl     *gomock.Controller
	recorder *MockGithubMockRecorder
	isgomock struct{}
}

// MockGithubMockRecorder is the mock recorder for MockGithub.
type MockGithubMockRecorder struct {
	mock *MockGithub
}

// NewMockGithub creates a new mock instance.
func NewMockGithub(ctrl *gomock.Controller) *MockGithub {
	mock := &MockGithub{ctrl: ctrl}
	mock.recorder = &MockGithubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithub) EXPECT() *MockGithubMockRecorder {
	return m.recorder
}

// LatestRelease mocks base method.
func (m *MockGithub) LatestRelease() (response.GHLatestRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestRelease")
	ret0, _ := ret[0].(response.GHLatestRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestRelease indicates an expected call of LatestRelease.
func (mr *MockGithubMockRecorder) LatestRelease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestRelease", reflect.TypeOf((*MockGithub)(nil).LatestRelease))
}
