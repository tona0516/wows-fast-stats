// Code generated by MockGen. DO NOT EDIT.
// Source: wargaming_interface.go
//
// Generated by this command:
//
//	mockgen -source=wargaming_interface.go -destination ../mock/repository/wargaming_interface.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	data "wfs/backend/data"

	gomock "go.uber.org/mock/gomock"
)

// MockWargamingInterface is a mock of WargamingInterface interface.
type MockWargamingInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWargamingInterfaceMockRecorder
}

// MockWargamingInterfaceMockRecorder is the mock recorder for MockWargamingInterface.
type MockWargamingInterfaceMockRecorder struct {
	mock *MockWargamingInterface
}

// NewMockWargamingInterface creates a new mock instance.
func NewMockWargamingInterface(ctrl *gomock.Controller) *MockWargamingInterface {
	mock := &MockWargamingInterface{ctrl: ctrl}
	mock.recorder = &MockWargamingInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWargamingInterface) EXPECT() *MockWargamingInterfaceMockRecorder {
	return m.recorder
}

// AccountInfo mocks base method.
func (m *MockWargamingInterface) AccountInfo(accountIDs []int) (data.WGAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfo", accountIDs)
	ret0, _ := ret[0].(data.WGAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo.
func (mr *MockWargamingInterfaceMockRecorder) AccountInfo(accountIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockWargamingInterface)(nil).AccountInfo), accountIDs)
}

// AccountList mocks base method.
func (m *MockWargamingInterface) AccountList(accountNames []string) (data.WGAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountList", accountNames)
	ret0, _ := ret[0].(data.WGAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountList indicates an expected call of AccountList.
func (mr *MockWargamingInterfaceMockRecorder) AccountList(accountNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountList", reflect.TypeOf((*MockWargamingInterface)(nil).AccountList), accountNames)
}

// AccountListForSearch mocks base method.
func (m *MockWargamingInterface) AccountListForSearch(prefix string) (data.WGAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountListForSearch", prefix)
	ret0, _ := ret[0].(data.WGAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountListForSearch indicates an expected call of AccountListForSearch.
func (mr *MockWargamingInterfaceMockRecorder) AccountListForSearch(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountListForSearch", reflect.TypeOf((*MockWargamingInterface)(nil).AccountListForSearch), prefix)
}

// BattleArenas mocks base method.
func (m *MockWargamingInterface) BattleArenas() (data.WGBattleArenas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BattleArenas")
	ret0, _ := ret[0].(data.WGBattleArenas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BattleArenas indicates an expected call of BattleArenas.
func (mr *MockWargamingInterfaceMockRecorder) BattleArenas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BattleArenas", reflect.TypeOf((*MockWargamingInterface)(nil).BattleArenas))
}

// BattleTypes mocks base method.
func (m *MockWargamingInterface) BattleTypes() (data.WGBattleTypes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BattleTypes")
	ret0, _ := ret[0].(data.WGBattleTypes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BattleTypes indicates an expected call of BattleTypes.
func (mr *MockWargamingInterfaceMockRecorder) BattleTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BattleTypes", reflect.TypeOf((*MockWargamingInterface)(nil).BattleTypes))
}

// ClansAccountInfo mocks base method.
func (m *MockWargamingInterface) ClansAccountInfo(accountIDs []int) (data.WGClansAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClansAccountInfo", accountIDs)
	ret0, _ := ret[0].(data.WGClansAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClansAccountInfo indicates an expected call of ClansAccountInfo.
func (mr *MockWargamingInterfaceMockRecorder) ClansAccountInfo(accountIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClansAccountInfo", reflect.TypeOf((*MockWargamingInterface)(nil).ClansAccountInfo), accountIDs)
}

// ClansInfo mocks base method.
func (m *MockWargamingInterface) ClansInfo(clanIDs []int) (data.WGClansInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClansInfo", clanIDs)
	ret0, _ := ret[0].(data.WGClansInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClansInfo indicates an expected call of ClansInfo.
func (mr *MockWargamingInterfaceMockRecorder) ClansInfo(clanIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClansInfo", reflect.TypeOf((*MockWargamingInterface)(nil).ClansInfo), clanIDs)
}

// EncycShips mocks base method.
func (m *MockWargamingInterface) EncycShips(pageNo int) (data.WGEncycShips, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncycShips", pageNo)
	ret0, _ := ret[0].(data.WGEncycShips)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EncycShips indicates an expected call of EncycShips.
func (mr *MockWargamingInterfaceMockRecorder) EncycShips(pageNo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncycShips", reflect.TypeOf((*MockWargamingInterface)(nil).EncycShips), pageNo)
}

// ShipsStats mocks base method.
func (m *MockWargamingInterface) ShipsStats(accountID int) (data.WGShipsStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShipsStats", accountID)
	ret0, _ := ret[0].(data.WGShipsStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShipsStats indicates an expected call of ShipsStats.
func (mr *MockWargamingInterfaceMockRecorder) ShipsStats(accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShipsStats", reflect.TypeOf((*MockWargamingInterface)(nil).ShipsStats), accountID)
}
