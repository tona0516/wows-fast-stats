// Code generated by MockGen. DO NOT EDIT.
// Source: discord_interface.go
//
// Generated by this command:
//
//	mockgen -source=discord_interface.go -destination ../mock/repository/discord_interface.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDiscordInterface is a mock of DiscordInterface interface.
type MockDiscordInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordInterfaceMockRecorder
	isgomock struct{}
}

// MockDiscordInterfaceMockRecorder is the mock recorder for MockDiscordInterface.
type MockDiscordInterfaceMockRecorder struct {
	mock *MockDiscordInterface
}

// NewMockDiscordInterface creates a new mock instance.
func NewMockDiscordInterface(ctrl *gomock.Controller) *MockDiscordInterface {
	mock := &MockDiscordInterface{ctrl: ctrl}
	mock.recorder = &MockDiscordInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordInterface) EXPECT() *MockDiscordInterfaceMockRecorder {
	return m.recorder
}

// Comment mocks base method.
func (m *MockDiscordInterface) Comment(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Comment", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Comment indicates an expected call of Comment.
func (mr *MockDiscordInterfaceMockRecorder) Comment(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comment", reflect.TypeOf((*MockDiscordInterface)(nil).Comment), message)
}
